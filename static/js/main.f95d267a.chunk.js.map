{"version":3,"sources":["image/tully/lover tully 20220121.jpg","image/tully/lover tully 202201213.jpg","image/tully/lover tully 202201214.jpg","image/tully/lover tully 202201218.jpg","image/tully/lover tully 202201219.jpg","image/tully/lover tully 2022012110.jpg","image/tully/lover tully 2022012111.jpg","image/tully/lover tully 2022012141.jpg","image/tully/lover tully 2022012142.jpg","image/tully/lover tully 2022012152.jpg","image/tully/logo/logo.png","menu.js","image/image.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","img","margin","display","maxWidth","backgroundColor","alignItems","menu","props","classes","Paper","className","alt","src","itemsImage","listMenu","page","page1","page2","page3","page4","page5","page6","page7","page8","page9","page10","storeInfo","fontFamily","fontStyle","App","Grid","container","xs","logo","list","map","item","index","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kD,mBCA3CD,EAAOC,QAAU,IAA0B,mD,mBCA3CD,EAAOC,QAAU,IAA0B,mD,mBCA3CD,EAAOC,QAAU,IAA0B,mD,mBCA3CD,EAAOC,QAAU,IAA0B,mD,mBCA3CD,EAAOC,QAAU,IAA0B,oD,mBCA3CD,EAAOC,QAAU,IAA0B,oD,mBCA3CD,EAAOC,QAAU,IAA0B,oD,mBCA3CD,EAAOC,QAAU,IAA0B,oD,mBCA3CD,EAAOC,QAAU,IAA0B,oD,mBCA3CD,EAAOC,QAAU,IAA0B,kC,wLCKrCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,IAAK,CACHC,OAAQ,EACRC,QAAS,OAETC,SAAU,QAEVC,gBAAiB,QACjBC,WAAY,cAKD,SAASC,EAAKC,GAEzB,IAAMC,EAAUX,IAChB,OACE,6BACE,kBAACY,EAAA,EAAD,KACE,4BAAQC,UAAWF,EAAQR,KACzB,yBACEU,UAAWF,EAAQR,IACnBW,IAAI,UACJC,IAAKL,EAAMM,gB,8KCJVC,EAbE,CACf,CAACC,KAAM,IAAIF,WAAYG,KACvB,CAACD,KAAM,IAAIF,WAAYI,KACvB,CAACF,KAAM,IAAIF,WAAYK,KACvB,CAACH,KAAM,IAAIF,WAAYM,KACvB,CAACJ,KAAM,IAAIF,WAAYO,KACvB,CAACL,KAAM,IAAIF,WAAYQ,KACvB,CAACN,KAAM,IAAIF,WAAYS,KACvB,CAAEP,KAAM,IAAKF,WAAYU,KACzB,CAAER,KAAM,IAAKF,WAAYW,KACzB,CAAET,KAAM,KAAMF,WAAYY,M,yBCTtB5B,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,IAAK,CACHC,OAAQ,EACRC,QAAS,OAETC,SAAU,QACVC,gBAAiB,QACjBC,WAAY,UAEdqB,UAAW,CACTC,WAAY,YACZC,UAAW,cAmCAC,MA/Bf,WAEE,IAAMrB,EAAUX,IAChB,OACE,yBAAKa,UAAU,OACb,kBAACD,EAAA,EAAD,KACE,kBAACqB,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,GAAI,GACR,4BAAQtB,UAAWF,EAAQR,KACzB,yBACEU,UAAWF,EAAQR,IACnBW,IAAI,UACJC,IAAKqB,QAIX,kBAACH,EAAA,EAAD,CAAME,GAAI,EAAGtB,UAAWF,EAAQkB,WAC9B,kEACA,kDAILQ,EAAKC,KAAI,SAACC,EAAMC,GACb,OAAO,kBAAC,EAAD,CAAUC,GAAID,EAAOxB,WAAYuB,EAAKvB,kBCtCnC0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f95d267a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lover tully 20220121.a2bf844a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lover tully 202201213.bbdf0dc4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lover tully 202201214.4e232b36.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lover tully 202201218.95fb1595.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lover tully 202201219.731d87b0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lover tully 2022012110.baf8b6d5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lover tully 2022012111.12d62323.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lover tully 2022012141.6af6bc71.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lover tully 2022012142.87b4005a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lover tully 2022012152.17d7e568.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.9c3ed713.png\";","import React from 'react'\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  img: {\r\n    margin: 0,\r\n    display: \"flex\",\r\n    \r\n    maxWidth: \"100vw\",\r\n    \r\n    backgroundColor: \"black\",\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\n\r\nexport default function menu(props) {\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    const classes = useStyles();\r\n    return (\r\n      <div>\r\n        <Paper>\r\n          <figure className={classes.img}>\r\n            <img\r\n              className={classes.img}\r\n              alt=\"complex\"\r\n              src={props.itemsImage}\r\n            />\r\n          </figure>\r\n        </Paper>\r\n      </div>\r\n    );\r\n}\r\n","\r\nimport page1 from \"./tully/lover tully 20220121.jpg\";\r\nimport page2 from \"./tully/lover tully 202201213.jpg\";\r\nimport page3 from \"./tully/lover tully 202201214.jpg\";\r\nimport page4 from \"./tully/lover tully 202201218.jpg\";\r\nimport page5 from \"./tully/lover tully 202201219.jpg\";\r\nimport page6 from \"./tully/lover tully 2022012110.jpg\";\r\nimport page7 from \"./tully/lover tully 2022012111.jpg\";\r\nimport page8 from \"./tully/lover tully 2022012141.jpg\";\r\nimport page9 from \"./tully/lover tully 2022012142.jpg\";\r\nimport page10 from \"./tully/lover tully 2022012152.jpg\";\r\nconst listMenu = [\r\n  {page: \"1\",itemsImage: page1,},\r\n  {page: \"2\",itemsImage: page2,},\r\n  {page: \"3\",itemsImage: page3,},\r\n  {page: \"4\",itemsImage: page4,},\r\n  {page: \"5\",itemsImage: page5,},\r\n  {page: \"6\",itemsImage: page6,},\r\n  {page: \"7\",itemsImage: page7,},\r\n  { page: \"8\", itemsImage: page8 },\r\n  { page: \"9\", itemsImage: page9 },\r\n  { page: \"10\", itemsImage: page10 },\r\n\r\n];\r\nexport default listMenu;","import React from 'react';\n\nimport './App.css';\nimport MenuForm from './menu';\nimport list from \"./image/image\";\n\nimport logo from \"./image/tully/logo/logo.png\"\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Paper, Grid } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme) => ({\n  img: {\n    margin: 0,\n    display: \"flex\",\n\n    maxWidth: \"100px\",\n    backgroundColor: \"white\",\n    alignItems: \"center\",\n  },\n  storeInfo: {\n    fontFamily: \"Helvetica\",\n    fontStyle: \"italic\",\n  },\n}));\n\nfunction App() {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const classes = useStyles();\n  return (\n    <div className=\"App\">\n      <Paper>\n        <Grid container>\n          <Grid xs={4}>\n            <figure className={classes.img}>\n              <img\n                className={classes.img}\n                alt=\"complex\"\n                src={logo}\n              />\n            </figure>\n          </Grid>\n          <Grid xs={8} className={classes.storeInfo}>\n            <h4 > 1696 Tully Rd, San Jose, CA 95122</h4>\n            <h4 > (408) 784-3379</h4>\n          </Grid></Grid>\n      </Paper>\n      \n      {list.map((item, index) => {\n          return <MenuForm id={index} itemsImage={item.itemsImage} />;\n\n      })}\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}